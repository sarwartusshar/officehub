{"version":3,"sources":["scripts/app-09619f739f.js"],"names":["angular","module","service","$http","$q","this","getMessages","pageSize","pageNumber","deferred","defer","uri","get","success","data","status","headers","config","resolve","error","reject","promise","getMessage","messageId","updateMessage","patch","deleteMessage","sendMessage","recipients","subject","body","saveToSentItems","Message","Subject","Body","ContentType","Content","ToRecipients","SaveToSentItems","forEach","recipient","push","EmailAddress","Address","trim","post","createReply","controller","$state","$stateParams","MessagesService","vm","ToAddresses","CcAddresses","split","then","go","cancel","id","Id","init","loadMessage","message","IsRead","toggleReadStatus","Messages","Sender","goToReply","goToMessages","$scope","busy","nextPage","HasNextPage","getNextMessages","length","value","console","log","index","toggleFlag","IsFlagged","reload","goToMessage","goToNewEmail","indexOf","splice","getUserPhoto","format","responseType","url","window","URL","webkitURL","blobUrl","createObjectURL","adalAuthenticationService","UsersService","userPhoto","login","logout","logOut","photo","$","fn","NavBar","each","$navBar","on","event","stopPropagation","toggleClass","click","hasClass","removeClass","children","preventDefault","siblings","find","val","blur","addClass","focus","document","jQuery","runBlock","$log","$rootScope","debug","run","$inject","routerConfig","$stateProvider","$urlRouterProvider","$locationProvider","state","abstract","views","header","templateUrl","footer","navigation","container@","controllerAs","requireADLogin","otherwise","constant","moment","$logProvider","$httpProvider","adalAuthenticationServiceProvider","clientId","postLogoutRedirectUri","endpoints","https://graph.microsoft.com","debugEnabled","$templateCache","put"],"mappings":"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","file":"scripts/app-09619f739f.js","sourcesContent":["(function() {\n  'use strict';\n\n  angular\n    .module('OfficeHub', ['AdalAngular', 'ngSanitize', 'ui.router', 'angularMoment', 'infinite-scroll', 'ngWig']);\n\n})();\n\n(function () {\n    angular.module('OfficeHub').service('MessagesService', ['$http', '$q', function ($http, $q) {\n      //#region Initialization\n      //----------------------------------------------------------------------\n      // Gets a reference to self\n      //----------------------------------------------------------------------\n      var self = this;\n      //#endregion\n\n      //#region Private Properties\n      //#endregion\n      \n      //#region Public Methods\n      this.getMessages = function (pageSize, pageNumber) {\n        //----------------------------------------------------------------------\n        // Use a promise to resolve the data from Office 365\n        //----------------------------------------------------------------------\n        var deferred = $q.defer();\n        \n            //----------------------------------------------------------------------\n        // Build the REST Endpoint URL\n        //----------------------------------------------------------------------\n        var uri = \"https://graph.microsoft.com/beta/me/MailFolders/Inbox/messages?&top=\" + pageSize;\n\n        //----------------------------------------------------------------------\n        // Builds the query to skip the elements of the past page\n        //----------------------------------------------------------------------\n        if (pageNumber > 1)\n        {\n          uri += \"&$skip=\" + ((pageNumber - 1) * pageSize);\n        }\n\n        //----------------------------------------------------------------------\n        // Executes the query on Office 365\n        //----------------------------------------------------------------------\n        $http.get(uri).success(function (data, status, headers, config) {\n          //----------------------------------------------------------------------\n          // If the request is successful, resolve the returned data\n          //----------------------------------------------------------------------\n          deferred.resolve(data);\n        }).error(function (data, status, headers, config) {\n          //----------------------------------------------------------------------\n          // If the request is unsuccessful, reject the promise\n          //----------------------------------------------------------------------\n          deferred.reject();\n        });\n\n        //----------------------------------------------------------------------\n        // Returns the async promise\n        //----------------------------------------------------------------------\n        return deferred.promise;\n      };\n\n      this.getMessage = function (messageId) {\n        //----------------------------------------------------------------------\n        // Use a promise to resolve the data from Office 365\n        //----------------------------------------------------------------------\n        var deferred = $q.defer();\n\n        //----------------------------------------------------------------------\n        // Build the REST Endpoint URL\n        //----------------------------------------------------------------------\n        var uri = \"https://graph.microsoft.com/beta/me/messages/\" + messageId;\n\n        //----------------------------------------------------------------------\n        // Executes the query on Office 365\n        //----------------------------------------------------------------------\n        $http.get(uri).success(function (data, status, headers, config) {\n          //----------------------------------------------------------------------\n          // If the request is successful, resolve the returned data\n          //----------------------------------------------------------------------\n          deferred.resolve(data);\n        }).error(function (data, status, headers, config) {\n          //----------------------------------------------------------------------\n          // If the request is unsuccessful, reject the promise\n          //----------------------------------------------------------------------\n          deferred.reject();\n        });\n\n        //----------------------------------------------------------------------\n        // Returns the async promise\n        //----------------------------------------------------------------------\n        return deferred.promise;\n      };\n\n      this.updateMessage = function (messageId, data) {\n        //----------------------------------------------------------------------\n        // Use a promise to resolve the data from Office 365\n        //----------------------------------------------------------------------\n        var deferred = $q.defer();\n\n        //----------------------------------------------------------------------\n        // Build the REST Endpoint URL\n        //----------------------------------------------------------------------\n        var uri = \"https://graph.microsoft.com/beta/me/messages/\" + messageId;\n\n        //----------------------------------------------------------------------\n        // Executes the query on Office 365\n        //----------------------------------------------------------------------\n        $http.patch(uri, data).success(function (data, status, headers, config) {\n          //----------------------------------------------------------------------\n          // If the request is successful, resolve the returned data\n          //----------------------------------------------------------------------\n          deferred.resolve(data);\n        }).error(function (data, status, headers, config) {\n          //----------------------------------------------------------------------\n          // If the request is unsuccessful, reject the promise\n          //----------------------------------------------------------------------\n          deferred.reject();\n        });\n\n        //----------------------------------------------------------------------\n        // Returns the async promise\n        //----------------------------------------------------------------------\n        return deferred.promise;\n      };\n\n      this.deleteMessage = function (messageId) {\n        //----------------------------------------------------------------------\n        // Use a promise to resolve the data from Office 365\n        //----------------------------------------------------------------------\n        var deferred = $q.defer();\n\n        //----------------------------------------------------------------------\n        // Build the REST Endpoint URL\n        //----------------------------------------------------------------------\n        var uri = \"https://graph.microsoft.com/beta/me/messages/\" + messageId;\n\n        //----------------------------------------------------------------------\n        // Executes the query on Office 365\n        //----------------------------------------------------------------------\n      $http.delete(uri).success(function (data, status, headers, config) {\n        //----------------------------------------------------------------------\n        // If the request is successful, resolve the returned data\n        //----------------------------------------------------------------------\n        deferred.resolve(data);\n      }).error(function (data, status, headers, config) {\n        //----------------------------------------------------------------------\n        // If the request is unsuccessful, reject the promise\n        //----------------------------------------------------------------------\n        deferred.reject();\n      });\n\n      //----------------------------------------------------------------------\n      // Returns the async promise\n      //----------------------------------------------------------------------\n      return deferred.promise;\n    };\n\n    this.sendMessage = function (recipients, subject, body, saveToSentItems) {\n      //----------------------------------------------------------------------\n      // Use a promise to resolve the data from Office 365\n      //----------------------------------------------------------------------\n      var deferred = $q.defer();\n\n      //----------------------------------------------------------------------\n      // Build the REST Endpoint URL\n      //----------------------------------------------------------------------\n      var uri = \"https://graph.microsoft.com/beta/me/sendmail\";\n\n      //----------------------------------------------------------------------\n      // Builds the necessary data object to send to the send an email\n      //----------------------------------------------------------------------\n      var data = {\n        Message: {\n          Subject: subject,\n          Body: {\n            ContentType: \"HTML\",\n            Content: body\n          },\n          ToRecipients: []\n        },\n        SaveToSentItems: saveToSentItems\n      }\n\n      //----------------------------------------------------------------------\n      // Adds the recipients to the message data\n      //----------------------------------------------------------------------\n      angular.forEach(recipients, function (recipient) {\n        data.Message.ToRecipients.push({\n          EmailAddress: {\n            Address: recipient.trim()\n          }\n        });\n      });\n\n      //----------------------------------------------------------------------\n      // Executes the query on Office 365\n      //----------------------------------------------------------------------\n      $http.post(uri, data).success(function (data, status, headers, config) {\n        //----------------------------------------------------------------------\n        // If the request is successful, resolve the returned data\n        //----------------------------------------------------------------------\n        deferred.resolve(data);\n      }).error(function (data, status, headers, config) {\n        //----------------------------------------------------------------------\n        // If the request is unsuccessful, reject the promise\n        //----------------------------------------------------------------------\n        deferred.reject();\n      });\n\n      //----------------------------------------------------------------------\n      // Returns the async promise\n      //----------------------------------------------------------------------\n      return deferred.promise;\n    };\n\n    this.createReply = function (messageId) {\n      //----------------------------------------------------------------------\n      // Use a promise to resolve the data from Office 365\n      //----------------------------------------------------------------------\n      var deferred = $q.defer();\n\n      //----------------------------------------------------------------------\n      // Build the REST Endpoint URL\n      //----------------------------------------------------------------------\n      var uri = \"https://graph.microsoft.com/beta/me/messages/\" + messageId + \"/CreateReply\";\n\n      //----------------------------------------------------------------------\n      // Executes the query on Office 365\n      //----------------------------------------------------------------------\n      $http.post(uri).success(function (data, status, headers, config) {\n        //----------------------------------------------------------------------\n        // If the request is successful, resolve the returned data\n        //----------------------------------------------------------------------\n        deferred.resolve(data);\n      }).error(function (data, status, headers, config) {\n        //----------------------------------------------------------------------\n        // If the request is unsuccessful, reject the promise\n        //----------------------------------------------------------------------\n        deferred.reject();\n      });\n\n      //----------------------------------------------------------------------\n      // Returns the async promise\n      //----------------------------------------------------------------------\n      return deferred.promise;\n    };\n    //#endregion\n  }]);\n}());\n(function () {\n    angular.module('OfficeHub').controller('ReplyController', ['$state', '$stateParams', 'MessagesService', function ($state, $stateParams, MessagesService) {\n        //#region Initialization\n        //----------------------------------------------------------------------\n        // Gets a reference to self\n        //----------------------------------------------------------------------\n        var vm = this;\n        //#endregion\n\n        //#region Private Members\n        var messageId = null;\n        //#endregion\n\n        //#region Public Members\n        //----------------------------------------------------------------------\n        // The original message that is used\n        //----------------------------------------------------------------------\n        vm.Message = null;\n        \n        //----------------------------------------------------------------------\n        // The adresses to send the email to\n        //----------------------------------------------------------------------\n        vm.ToAddresses = \"\";\n        \n        //----------------------------------------------------------------------\n        // The adresses to cc the email to\n        //----------------------------------------------------------------------\n        vm.CcAddresses = \"\";\n\n        //----------------------------------------------------------------------\n        // The subject of the email\n        //----------------------------------------------------------------------\n        vm.Subject = \"\";\n\n        //----------------------------------------------------------------------\n        // The body the email\n        //----------------------------------------------------------------------\n        vm.Body = \"\";\n        //#endregion\n\n        //#region Public Methods    \n        vm.sendMessage = function () {\n          //----------------------------------------------------------------------\n          // Sends the message to the recipients\n          //----------------------------------------------------------------------\n          MessagesService.sendMessage(vm.ToAddresses.split(';'), vm.Subject, vm.Body, true).then(function (data) {\n            //----------------------------------------------------------------------\n            // Redirects to the inbox\n            //----------------------------------------------------------------------\n            $state.go('root.messages');\n          }, function () {\n            //----------------------------------------------------------------------\n            // If an error occured, do nothing\n            //----------------------------------------------------------------------\n          });\n        };\n             \n        vm.cancel = function() {\n          if(vm.Message) {\n            $state.go('root.message', { id: vm.Message.Id });\n          } else {\n            $state.go('root.messages');\n          }\n          \n        }\n        //#endregion\n\n        //#region Private Methods\n        var init = function () {\n          messageId = $stateParams.id;\n          \n          loadMessage().then(function () {\n            //----------------------------------------------------------------------\n            // Loads first page of the messages\n            //----------------------------------------------------------------------\n            createReply();\n          });\n        };\n        \n       var loadMessage = function() {\n          //----------------------------------------------------------------------\n          // Loads the message based on the current messageId\n          //----------------------------------------------------------------------\n          return MessagesService.getMessage(messageId).then(function (message) {\n            //----------------------------------------------------------------------\n            // Update the view data\n            //----------------------------------------------------------------------\n            vm.Message = message;\n            \n            if (!vm.Message.IsRead) {\n              //----------------------------------------------------------------------\n              // If the email is not read, flag it as read\n              //----------------------------------------------------------------------\n              vm.toggleReadStatus();\n            }\n          }, function () {\n              vm.Messages = null;\n          });\n        };\n        \n        var createReply = function () {\n          //----------------------------------------------------------------------\n          // Creates a reply of the requested message\n          //----------------------------------------------------------------------\n          return MessagesService.createReply(messageId).then(function (data) {\n            //----------------------------------------------------------------------\n            // Assign the view data to the reply received (title with RE:, etc.)\n            //----------------------------------------------------------------------\n            vm.ToAddresses = vm.Message.Sender.EmailAddress.Address;\n            vm.Subject = data.Subject;\n            vm.Body = \"<br /><br />\" + data.Body.Content;\n          }, function () {\n            //----------------------------------------------------------------------\n            // If an error occured, do nothing\n            //----------------------------------------------------------------------\n          });\n        };\n        //#endregion\n\n        //#region Initialization\n        init();\n        //#endregion\n    }]);\n}());\n(function () {\n    angular.module('OfficeHub').controller('NewMessageController', ['$state', 'MessagesService', function ($state, MessagesService) {\n        //#region Initialization\n        //----------------------------------------------------------------------\n        // Gets a reference to self\n        //----------------------------------------------------------------------\n        var vm = this;\n        //#endregion\n\n        //#region Private Members\n        //#endregion\n\n        //#region Public Members\n        \n        //----------------------------------------------------------------------\n        // The adresses to send the email to\n        //----------------------------------------------------------------------\n        vm.ToAddresses = \"\";\n        \n        //----------------------------------------------------------------------\n        // The adresses to cc the email to\n        //----------------------------------------------------------------------\n        vm.CcAddresses = \"\";\n\n        //----------------------------------------------------------------------\n        // The subject of the email\n        //----------------------------------------------------------------------\n        vm.Subject = \"\";\n\n        //----------------------------------------------------------------------\n        // The body the email\n        //----------------------------------------------------------------------\n        vm.Body = \"\";\n        //#endregion\n\n        //#region Public Methods    \n        vm.sendMessage = function () {\n          //----------------------------------------------------------------------\n          // Sends the message to the recipients\n          //----------------------------------------------------------------------\n          MessagesService.sendMessage(vm.ToAddresses.split(';'), vm.Subject, vm.Body, true).then(function (data) {\n            //----------------------------------------------------------------------\n            // Redirects to the inbox\n            //----------------------------------------------------------------------\n            $state.go('root.messages');\n          }, function () {\n            //----------------------------------------------------------------------\n            // If an error occured, do nothing\n            //----------------------------------------------------------------------\n          });\n        };\n             \n        vm.cancel = function() {\n          $state.go('root.messages');          \n        }\n        //#endregion\n\n        //#region Private Methods\n        //#endregion\n\n        //#region Initialization\n        //#endregion\n    }]);\n}());\n(function () {\n    angular.module('OfficeHub').controller('MessageController', ['$state', '$stateParams', 'MessagesService', function ($state, $stateParams, MessagesService) {\n        //#region Initialization\n        //----------------------------------------------------------------------\n        // Gets a reference to self\n        //----------------------------------------------------------------------\n        var vm = this;\n        //#endregion\n\n        //#region Private Members\n        var messageId = null;\n        //#endregion\n\n        //#region Public Members\n        //----------------------------------------------------------------------\n        // The message that is used\n        //----------------------------------------------------------------------\n        vm.Message = null;\n        //#endregion\n\n        //#region Public Methods        \n        vm.loadMessage = function() {\n          //----------------------------------------------------------------------\n          // Loads the message based on the current messageId\n          //----------------------------------------------------------------------\n          MessagesService.getMessage(messageId).then(function (message) {\n            //----------------------------------------------------------------------\n            // Update the view data\n            //----------------------------------------------------------------------\n            vm.Message = message;\n            \n            if (!vm.Message.IsRead) {\n              //----------------------------------------------------------------------\n              // If the email is not read, flag it as read\n              //----------------------------------------------------------------------\n              vm.toggleReadStatus();\n            }\n          }, function () {\n              vm.Messages = null;\n          });\n        };\n        \n        vm.toggleReadStatus = function () {\n          //----------------------------------------------------------------------\n          // Sets the IsRead status\n          //----------------------------------------------------------------------\n          var data = {\n            IsRead: !vm.Message.IsRead\n          };\n\n          //----------------------------------------------------------------------\n          // Update the message to be considered read\n          //----------------------------------------------------------------------\n          MessagesService.updateMessage(messageId, data).then(function (message) {\n            //----------------------------------------------------------------------\n            // Update the view message\n            //----------------------------------------------------------------------\n            vm.Message = message;\n          }, function () {\n            //----------------------------------------------------------------------\n            // If an error occured, do nothing\n            //----------------------------------------------------------------------\n          });\n        };\n        \n         vm.deleteMessage = function () {\n          //----------------------------------------------------------------------\n          // Deletes a message\n          //----------------------------------------------------------------------\n          MessagesService.deleteMessage(messageId).then(function () {\n            //----------------------------------------------------------------------\n            // Redirect to the inbox view\n            //----------------------------------------------------------------------\n            $state.go(\"root.messages\");\n          }, function () {\n            //----------------------------------------------------------------------\n            // If an error occured, do nothing\n            //----------------------------------------------------------------------\n          });\n        };\n        \n        vm.goToReply = function() {\n          $state.go('root.messageReply', { id: vm.Message.Id })\n        }\n        \n        vm.goToMessages = function() {\n          $state.go('root.messages');\n        }\n        //#endregion\n\n        //#region Private Methods\n        var init = function () {\n          messageId = $stateParams.id;\n          \n          //----------------------------------------------------------------------\n          // Loads first page of the messages\n          //----------------------------------------------------------------------\n          vm.loadMessage();\n        };\n        //#endregion\n\n        //#region Initialization\n        init();\n        //#endregion\n    }]);\n}());\n(function () {\n    angular.module('OfficeHub').controller('InboxController', ['$scope', '$state', 'MessagesService', function ($scope, $state, MessagesService) {\n        //#region Initialization\n        //----------------------------------------------------------------------\n        // Gets a reference to self\n        //----------------------------------------------------------------------\n        var vm = this;\n        //#endregion\n\n        //#region Private Members\n        //----------------------------------------------------------------------\n        // The amount of items the users sees per page\n        //----------------------------------------------------------------------\n        var pageSize = 10;\n        var busy = false;\n        var nextPage = 1;\n        //#endregion\n\n        //#region Public Members\n        //----------------------------------------------------------------------\n        // The messages that are bound to the inbox content\n        //----------------------------------------------------------------------\n        vm.Messages = [];\n\n        //----------------------------------------------------------------------\n        // Boolean value representing if there is a next page\n        //----------------------------------------------------------------------\n        vm.HasNextPage = true;\n        //#endregion\n\n        //#region Public Methods        \n        vm.getNextMessages = function() {\n          //----------------------------------------------------------------------\n          // Loads the next messages\n          //----------------------------------------------------------------------\n          if(nextPage * pageSize != this.Messages.length) {\n            //----------------------------------------------------------------------\n            // Don't process the request if it is actually occuring\n            //----------------------------------------------------------------------\n            if (busy) return;\n            busy = true;\n            \n            //----------------------------------------------------------------------\n            // Asks the service for the next page\n            //----------------------------------------------------------------------\n            MessagesService.getMessages(pageSize, nextPage).then(function (data) {\n              nextPage = nextPage + 1;\n              \n              //----------------------------------------------------------------------\n              // Pushes the new messages\n              //----------------------------------------------------------------------\n              angular.forEach(data.value, function(message) {\n                vm.Messages.push(message);\n              });\n              \n              //----------------------------------------------------------------------\n              // Re-allows process of new messages\n              //----------------------------------------------------------------------\n              busy = false;\n            }, function () {\n              console.log(\"An error occured\");\n            });\n          }\n        };\n        \n        vm.toggleReadStatus = function (index) {\n          //----------------------------------------------------------------------\n          // Sets the IsRead status\n          //----------------------------------------------------------------------\n          var data = {\n            IsRead: !vm.Messages[index].IsRead\n          };\n\n          //----------------------------------------------------------------------\n          // Update the message to be considered read\n          //----------------------------------------------------------------------\n          MessagesService.updateMessage(vm.Messages[index].Id, data).then(function (message) {\n            //----------------------------------------------------------------------\n            // Update the view message\n            //----------------------------------------------------------------------\n            vm.Messages[index].IsRead = message.IsRead;             \n          }, function () {\n            //----------------------------------------------------------------------\n            // If an error occured, do nothing\n            //----------------------------------------------------------------------\n          });\n        };\n        \n        vm.toggleFlag = function (index) {\n          //----------------------------------------------------------------------\n          // Sets the IsRead status\n          //----------------------------------------------------------------------\n          var data = {\n            IsFlagged: !vm.Messages[index].IsRead\n          };\n\n          //----------------------------------------------------------------------\n          // Update the message to be considered read\n          //----------------------------------------------------------------------\n          MessagesService.updateMessage(vm.Messages[index].Id, data).then(function (message) {\n            //----------------------------------------------------------------------\n            // Update the view message\n            //----------------------------------------------------------------------\n            vm.Messages[index].IsRead = message.IsRead;             \n          }, function () {\n            //----------------------------------------------------------------------\n            // If an error occured, do nothing\n            //----------------------------------------------------------------------\n          });\n        };\n        \n        vm.reload = function() {\n          vm.Messages = [];\n          busy = false;\n          nextPage = 1;\n          \n          vm.getNextMessages();\n        }\n        \n        vm.goToMessage = function(message) {\n          $state.go(\"root.message\", { id: message.Id });\n        }\n        \n        vm.goToNewEmail = function() {\n          $state.go(\"root.messageNew\");\n        }\n        \n        vm.deleteMessage = function (message) {\n          //----------------------------------------------------------------------\n          // Deletes a message\n          //----------------------------------------------------------------------\n          MessagesService.deleteMessage(message.Id).then(function () {\n            //----------------------------------------------------------------------\n            // Deleting the local version of the message\n            //----------------------------------------------------------------------\n            var index = vm.Messages.indexOf(message);\n            vm.Messages.splice(index, 1);   \n            \n            //----------------------------------------------------------------------\n            // Redirect to the inbox view\n            //----------------------------------------------------------------------\n            $state.go(\"root.messages\");\n          }, function () {\n            //----------------------------------------------------------------------\n            // If an error occured, do nothing\n            //----------------------------------------------------------------------\n          });\n        }\n        //#endregion\n\n        //#region Private Methods\n        var init = function () {\n            //----------------------------------------------------------------------\n            // Loads first page of the messages\n            //----------------------------------------------------------------------\n            //vm.loadMessages();\n        };\n\n        var updateView = function (data) {\n            //----------------------------------------------------------------------\n            // Updates the content of the view\n            //----------------------------------------------------------------------\n            vm.Messages = data.value;\n            vm.HasNextPage = data[\"@odata.nextLink\"] != undefined && data[\"@odata.nextLink\"] != null;\n        }\n        //#endregion\n\n        //#region Initialization\n        init();\n        //#endregion\n    }]);\n}());\n(function () {\n  angular.module('OfficeHub').service('UsersService', ['$http', '$q', function ($http, $q) {\n    //#region Initialization\n    //----------------------------------------------------------------------\n    // Gets a reference to self\n    //----------------------------------------------------------------------\n    var self = this;\n    //#endregion\n\n    //#region Private Properties\n    //#endregion\n    \n    //#region Public Methods\n    this.getUserPhoto = function (format) {\n      //----------------------------------------------------------------------\n      // Use a promise to resolve the data from Office 365\n      //----------------------------------------------------------------------\n      var deferred = $q.defer();\n\n      //----------------------------------------------------------------------\n      // Build the REST Endpoint URL\n      //----------------------------------------------------------------------\n      var uri = \"https://graph.microsoft.com/beta/me/Photos/\" + format + \"/$value\";\n\n      //----------------------------------------------------------------------\n      // Executes the query on Office 365\n      //----------------------------------------------------------------------\n      $http.get(uri, { responseType: 'blob' }).success(function (data, status, headers, config) {\n        //----------------------------------------------------------------------\n        // If the request is successful, resolve the returned data\n        //----------------------------------------------------------------------\n        var url = window.URL || window.webkitURL;\n        var blobUrl = url.createObjectURL(data);\n        deferred.resolve(blobUrl);\n      }).error(function (data, status, headers, config) {\n        //----------------------------------------------------------------------\n        // If the request is unsuccessful, reject the promise\n        //----------------------------------------------------------------------\n        deferred.reject();\n      });\n\n      //----------------------------------------------------------------------\n      // Returns the async promise\n      //----------------------------------------------------------------------\n      return deferred.promise;\n    };\n    //#endregion\n  }]);\n}());\n(function () {\n  angular.module('OfficeHub').controller('AdalController', ['adalAuthenticationService', 'UsersService', function (adalAuthenticationService, UsersService) {\n    //#region Initialization\n    //----------------------------------------------------------------------\n    // Gets a reference to self\n    //----------------------------------------------------------------------\n    var vm = this;\n    //#endregion\n\n    //#region Private Members\n    //#endregion\n\n    //#region Public Members\n    vm.userPhoto = \"\"\n    //#endregion\n\n    //#region Public Methods\n    vm.login = function () {\n      //----------------------------------------------------------------------\n      // Invokes the login function of the ADAL library\n      //----------------------------------------------------------------------\n      adalAuthenticationService.login();\n    };\n\n    vm.logout = function () {\n      //----------------------------------------------------------------------\n      // Invokes the logout function of the ADAL library\n      //----------------------------------------------------------------------\n      adalAuthenticationService.logOut();\n    };\n    //#endregion\n\n    //#region Private Methods\n    var init = function() {\n      vm.userPhoto = getUserPhoto();\n    };\n    \n    var getUserPhoto = function() {\n      //----------------------------------------------------------------------\n      // Update the message to be considered read\n      //----------------------------------------------------------------------\n      UsersService.getUserPhoto(\"96X96\").then(function (photo) {\n        //----------------------------------------------------------------------\n        // Update the view message\n        //----------------------------------------------------------------------\n        vm.userPhoto = photo;      \n      }, function () {\n        //----------------------------------------------------------------------\n        // If an error occured, do nothing\n        //----------------------------------------------------------------------\n      });\n    };\n    //#endregion\n\n    //#region Initialization\n    init();\n    //#endregion\n  }]);\n}());\n\n// Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See LICENSE in the project root for license information.\n\n/**\n * Nav Bar Plugin\n */\n(function ($) {\n  $.fn.NavBar = function () {\n\n    /** Go through each nav bar we've been given. */\n    return this.each(function () {\n\n      var $navBar = $(this);\n\n      // Open the nav bar on mobile.\n      $navBar.on('click', '.js-openMenu', function(event) {\n        event.stopPropagation();\n        $navBar.toggleClass('is-open');\n      });\n\n      // Close the nav bar on mobile.\n      $navBar.click(function() {\n        if ($navBar.hasClass('is-open')) {\n          $navBar.removeClass('is-open');\n        }\n      });\n\n      // Set selected states and open/close menus.\n      $navBar.on('click', '.ms-NavBar-item:not(.is-disabled)', function(event) {\n        event.stopPropagation();\n\n        // Prevent default actions from firing if links are not found.\n        if ($(this).children('.ms-NavBar-link').length === 0) {\n          event.preventDefault();\n        }\n\n        // Deselect all of the items.\n        $(this).siblings('.ms-NavBar-item').removeClass('is-selected');\n\n        // Close and blur the search box if it doesn't have text.\n        if ($navBar.find('.ms-NavBar-item.ms-NavBar-item--search .ms-TextField-field').val().length === 0) {\n          $('.ms-NavBar-item.ms-NavBar-item--search').removeClass('is-open').find('.ms-TextField-field').blur();\n        }\n\n        // Does the selected item have a menu?\n        if ($(this).hasClass('ms-NavBar-item--hasMenu')) {\n\n          // Toggle 'is-open' to open or close it.\n          $(this).children('.ms-ContextualMenu:first').toggleClass('is-open');\n\n          // Toggle 'is-selected' to indicate whether it is active.\n          $(this).toggleClass('is-selected');\n        } else {\n          // Doesn't have a menu, so just select the item.\n          $(this).addClass('is-selected');\n\n          // Close the submenu and any open contextual menus.\n          $navBar.removeClass('is-open').find('.ms-ContextualMenu').removeClass('is-open');\n        }\n\n        // Is this the search box? Open it up and focus on the search field.\n        if ($(this).hasClass('ms-NavBar-item--search')) {\n          $(this).addClass('is-open');\n          $(this).find('.ms-TextField-field').focus();\n\n          // Close any open menus.\n          $navBar.find('.ms-ContextualMenu:first').removeClass('is-open');\n        }\n      });\n\n      // Prevent contextual menus from being hidden when clicking on them.\n      $navBar.on('click', '.ms-NavBar-item .ms-ContextualMenu', function(event) {\n        event.stopPropagation();\n\n        // Collapse the mobile \"panel\" for nav items.\n        $(this).removeClass('is-open');\n        $navBar.removeClass('is-open').find('.ms-NavBar-item--hasMenu').removeClass('is-selected');\n      });\n\n      // Hide any menus and close the search box when clicking anywhere in the document.\n      $(document).on('click', 'html', function(event) {\n        $navBar.find('.ms-NavBar-item').removeClass('is-selected').find('.ms-ContextualMenu').removeClass('is-open');\n\n        // Close and blur the search box if it doesn't have text.\n        if ($navBar.find('.ms-NavBar-item.ms-NavBar-item--search .ms-TextField-field').val().length === 0) {\n          $navBar.find('.ms-NavBar-item.ms-NavBar-item--search').removeClass('is-open').find('.ms-TextField-field').blur();\n        }\n      });\n    });\n  };\n})(jQuery);\n\n(function() {\n  'use strict';\n\n  angular\n    .module('OfficeHub')\n    .run(runBlock);\n\n  /** @ngInject */\n  function runBlock($log, $rootScope, $state) {\n    $rootScope.$state = $state;\n    $log.debug('runBlock end');\n  }\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('OfficeHub')\n    .config(routerConfig);\n\n  /** @ngInject */\n  function routerConfig($stateProvider, $urlRouterProvider, $locationProvider) {   \n    //$locationProvider.html5Mode(true);\n     \n    $stateProvider\n      .state('root', {\n        url: '',\n        abstract: true,\n        views: {\n          'header': {\n            templateUrl: 'app/components/header/header.html'\n          },\n          'footer': {\n            templateUrl: 'app/components/footer/footer.html'\n          },\n          'navigation': {\n            templateUrl: 'app/components/navigation/navigation.html'\n          }\n        }\n      })\n      .state('root.home', {\n        url: '/',\n        views: {\n           'container@': { \n            templateUrl: 'app/components/home/home.html'\n          }\n        }\n      })\n      .state('root.messages', {\n        url: '/messages',\n        views: {\n          'container@': {\n            templateUrl: 'app/components/messages/views/inbox.html',\n            controller: \"InboxController\",\n            controllerAs: \"vm\"\n          }\n        },\n        requireADLogin: true\n      })\n      .state('root.messageNew', {\n        url: '/messages/compose',\n        views: {\n          'container@': {\n            templateUrl: 'app/components/messages/views/compose.html',\n            controller: \"NewMessageController\",\n            controllerAs: \"vm\"\n          }\n        },\n        requireADLogin: true\n      })\n      .state('root.message', {\n        url: '/messages/:id',\n        views: {\n          'container@': {\n            templateUrl: 'app/components/messages/views/message.html',\n            controller: \"MessageController\",\n            controllerAs: \"vm\"\n          }\n        },\n        requireADLogin: true\n      })\n      .state('root.messageReply', {\n        url: '/messages/compose/:id',\n        views: {\n          'container@': {\n            templateUrl: 'app/components/messages/views/compose.html',\n            controller: \"ReplyController\",\n            controllerAs: \"vm\"\n          }\n        },\n        requireADLogin: true\n      });\n\n    $urlRouterProvider.otherwise('/');\n  }\n\n})();\n\n/* global malarkey:false, moment:false */\n(function() {\n  'use strict';\n\n  angular\n    .module('OfficeHub')\n    .constant('moment', moment);\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('OfficeHub')\n    .config(config);\n\n  /** @ngInject */\n  function config($logProvider, $httpProvider, adalAuthenticationServiceProvider) {\n    \n    //----------------------------------------------------------------------\n    // ADAL configuration\n    //----------------------------------------------------------------------\n    adalAuthenticationServiceProvider.init({\n      //tenant: 'a204560f-5ffc-4cf5-a723-22981d99c4f9',\n      //clientId: '6bfd5aea-41ff-448a-96d3-6398844d8e75',\n      clientId: '8678d1cb-82dc-4520-a750-71d1e4f38f57',\n      postLogoutRedirectUri: 'http://localhost:3000',\n      endpoints: {\n          'https://graph.microsoft.com': 'https://graph.microsoft.com'\n      }\n    }, $httpProvider);\n            \n    // Enable log\n    $logProvider.debugEnabled(true);\n  }\n\n})();\nangular.module(\"OfficeHub\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/main/main.html\",\"<div class=\\\"ms-Grid\\\"><div ui-view=\\\"\\\" name=\\\"navigation\\\"></div><div ui-view=\\\"\\\" name=\\\"header\\\"></div><div class=\\\"ms-Grid-row\\\"><div ui-view=\\\"\\\" name=\\\"content\\\"></div><div ui-view=\\\"\\\" name=\\\"footer\\\"></div></div></div>\");\n$templateCache.put(\"app/components/footer/footer.html\",\"<footer id=\\\"page-footer\\\" class=\\\"ms-Grid-row ms-Grid-col ms-u-sm12 ms-font-m ms-fontWeight-light ms-fontColor-white\\\"></footer>\");\n$templateCache.put(\"app/components/header/header.html\",\"\");\n$templateCache.put(\"app/components/home/home.html\",\"<article id=\\\"page-main\\\" class=\\\"ms-Grid-col ms-u-sm12 ms-font-m\\\"><p class=\\\"ms-font-su\\\">Office Hub</p><p class=\\\"ms-font-l\\\">The purpose of this sample is to provide guidance on the integration of AngularJS with the Office 365 Unified API.</p></article>\");\n$templateCache.put(\"app/components/navigation/navigation.html\",\"<div id=\\\"page-navigation\\\" class=\\\"ms-NavBar\\\" ng-controller=\\\"AdalController as adal\\\"><ul class=\\\"ms-NavBar-items\\\"><li class=\\\"ms-NavBar-item\\\"><a class=\\\"ms-NavBar-link\\\" ui-sref=\\\"root.home\\\">Home</a></li><li class=\\\"ms-NavBar-item\\\"><a class=\\\"ms-NavBar-link\\\" ui-sref=\\\"root.messages\\\">Messages</a></li><li class=\\\"ms-NavBar-item ms-NavBar-item--right\\\" ng-if=\\\"!userInfo.isAuthenticated\\\"><a class=\\\"ms-NavBar-link\\\" ng-click=\\\"adal.login()\\\">Login</a></li><li class=\\\"ms-NavBar-item ms-NavBar-item--right\\\" ng-if=\\\"userInfo.isAuthenticated\\\"><a class=\\\"ms-NavBar-link\\\" ng-click=\\\"adal.logout()\\\">Logout</a></li><li class=\\\"ms-NavBar-item is-disabled ms-NavBar-item--right\\\" ng-if=\\\"userInfo.isAuthenticated\\\"><div class=\\\"ms-Persona ms-Persona--xs\\\"><div class=\\\"ms-Persona-imageArea\\\"><div class=\\\"ms-Persona-imageCircle\\\"><i class=\\\"ms-Persona-placeholder ms-Icon ms-Icon--person\\\"></i> <img class=\\\"ms-Persona-image\\\" ng-src=\\\"{{ adal.userPhoto }}\\\"></div></div><div class=\\\"ms-Persona-details\\\"><a class=\\\"ms-NavBar-link\\\">{{ userInfo.profile.name }}</a></div></div></li></ul></div>\");\n$templateCache.put(\"app/components/messages/views/compose.html\",\"<article id=\\\"page-main\\\" class=\\\"ms-Grid-col ms-u-sm12 ms-font-m\\\"><div class=\\\"ms-CommandBar mail-bar\\\"><div class=\\\"ms-CommandBar-sideCommands\\\"><div class=\\\"ms-CommandBarItem ms-CommandBarItem--iconOnly\\\" ng-click=\\\"vm.cancel()\\\"><div class=\\\"ms-CommandBarItem-linkWrapper\\\"><div class=\\\"ms-CommandBarItem-link\\\"><span class=\\\"ms-CommandBarItem-icon ms-Icon ms-Icon--x\\\"></span></div></div></div></div><div class=\\\"ms-CommandBar-mainArea\\\"><div class=\\\"ms-CommandBarItem\\\" ng-click=\\\"vm.sendMessage()\\\"><div class=\\\"ms-CommandBarItem-linkWrapper\\\"><div class=\\\"ms-CommandBarItem-link\\\"><span class=\\\"ms-CommandBarItem-icon ms-Icon ms-Icon--mailSend\\\"></span> <span class=\\\"ms-CommandBarItem-commandText ms-font-m ms-font-weight-regular\\\">Send</span></div></div></div></div><div class=\\\"ms-CommandBarItem ms-CommandBarItem--iconOnly ms-CommandBarItem-overflow\\\"><div class=\\\"ms-CommandBarItem-linkWrapper\\\"><div class=\\\"ms-CommandBarItem-link\\\"><span class=\\\"ms-CommandBarItem-icon ms-Icon ms-Icon--ellipsis\\\"></span> <span class=\\\"ms-CommandBarItem-commandText ms-font-m ms-font-weight-regular\\\"></span> <i class=\\\"ms-CommandBarItem-chevronDown ms-Icon ms-Icon--chevronDown\\\"></i></div></div><ul class=\\\"ms-CommandBar-overflowMenu ms-ContextualMenu\\\"></ul></div></div><p class=\\\"ms-font-xxl page-title\\\">{{ vm.Subject }}</p><div class=\\\"ms-TextField ms-TextField--underlined\\\"><label class=\\\"ms-Label\\\">To:</label> <input class=\\\"ms-TextField-field\\\" ng-model=\\\"vm.ToAddresses\\\"></div><div class=\\\"ms-TextField ms-TextField--underlined\\\"><label class=\\\"ms-Label\\\">Cc:</label> <input class=\\\"ms-TextField-field\\\" ng-model=\\\"vm.CcAddresses\\\"></div><div class=\\\"ms-TextField ms-TextField--underlined\\\"><label class=\\\"ms-Label\\\">Subject:</label> <input class=\\\"ms-TextField-field\\\" ng-model=\\\"vm.Subject\\\"></div><div ng-wig=\\\"vm.Body\\\"></div></article>\");\n$templateCache.put(\"app/components/messages/views/inbox.html\",\"<article id=\\\"page-main\\\" class=\\\"ms-Grid-col ms-u-sm12 ms-font-m\\\"><div class=\\\"top-info\\\"><div class=\\\"ms-CommandBar mail-bar\\\"><div class=\\\"ms-CommandBar-sideCommands\\\"><div class=\\\"ms-CommandBarItem ms-CommandBarItem--iconOnly\\\" ng-click=\\\"vm.reload()\\\"><div class=\\\"ms-CommandBarItem-linkWrapper\\\"><div class=\\\"ms-CommandBarItem-link\\\"><span class=\\\"ms-CommandBarItem-icon ms-Icon ms-Icon--reload\\\"></span></div></div></div></div><div class=\\\"ms-CommandBar-mainArea\\\"><div class=\\\"ms-CommandBarItem\\\" ng-click=\\\"vm.goToNewEmail()\\\"><div class=\\\"ms-CommandBarItem-linkWrapper\\\"><div class=\\\"ms-CommandBarItem-link\\\"><span class=\\\"ms-CommandBarItem-icon ms-Icon ms-Icon--circlePlus\\\"></span> <span class=\\\"ms-CommandBarItem-commandText ms-font-m ms-font-weight-regular\\\">New</span></div></div></div><div class=\\\"ms-CommandBarItem ms-CommandBarItem--iconOnly ms-CommandBarItem-overflow\\\"><div class=\\\"ms-CommandBarItem-linkWrapper\\\"><div class=\\\"ms-CommandBarItem-link\\\"><span class=\\\"ms-CommandBarItem-icon ms-Icon ms-Icon--ellipsis\\\"></span> <span class=\\\"ms-CommandBarItem-commandText ms-font-m ms-font-weight-regular\\\"></span> <i class=\\\"ms-CommandBarItem-chevronDown ms-Icon ms-Icon--chevronDown\\\"></i></div></div><ul class=\\\"ms-CommandBar-overflowMenu ms-ContextualMenu\\\"></ul></div></div></div><p class=\\\"ms-font-xxl page-title\\\">Messages</p></div><ul class=\\\"ms-List mail-list\\\" infinite-scroll=\\\"vm.getNextMessages()\\\"><div class=\\\"ms-ListItem is-selectable mail-item\\\" ng-class=\\\"{true: \\'\\', false: \\'is-unread\\'}[message.IsRead]\\\" data-ng-repeat=\\\"message in vm.Messages\\\"><span class=\\\"ms-ListItem-primaryText\\\" ng-click=\\\"vm.goToMessage(message)\\\">{{ message.Sender.EmailAddress.Name }}</span> <span class=\\\"ms-ListItem-secondaryText\\\" ng-click=\\\"vm.goToMessage(message)\\\">{{ message.Subject }}</span> <span class=\\\"ms-ListItem-tertiaryText\\\">{{ message.BodyPreview }}</span> <span class=\\\"ms-ListItem-metaText\\\">{{ message.ReceivedDateTime | amCalendar }}</span><div class=\\\"ms-ListItem-selectionTarget js-toggleSelection\\\"></div><div class=\\\"ms-ListItem-actions\\\"><div class=\\\"ms-ListItem-action\\\" ng-click=\\\"vm.deleteMessage(message)\\\"><i class=\\\"ms-Icon ms-Icon--trash\\\"></i></div><div class=\\\"ms-ListItem-action\\\" ng-click=\\\"vm.toggleReadStatus($index)\\\"><i class=\\\"ms-Icon ms-Icon--mailUnread\\\"></i></div></div></div></ul></article>\");\n$templateCache.put(\"app/components/messages/views/message.html\",\"<article id=\\\"page-main\\\" class=\\\"ms-Grid-col ms-u-sm12 ms-font-m\\\"><div class=\\\"ms-CommandBar mail-bar\\\"><div class=\\\"ms-CommandBar-sideCommands\\\"><div class=\\\"ms-CommandBarItem ms-CommandBarItem--iconOnly\\\" ng-click=\\\"vm.goToMessages()\\\"><div class=\\\"ms-CommandBarItem-linkWrapper\\\"><div class=\\\"ms-CommandBarItem-link\\\"><span class=\\\"ms-CommandBarItem-icon ms-Icon ms-Icon--x\\\"></span></div></div></div></div><div class=\\\"ms-CommandBar-mainArea\\\"><div class=\\\"ms-CommandBarItem\\\" ng-click=\\\"vm.goToReply()\\\"><div class=\\\"ms-CommandBarItem-linkWrapper\\\"><div class=\\\"ms-CommandBarItem-link\\\"><span class=\\\"ms-CommandBarItem-icon ms-Icon ms-Icon--reply\\\"></span> <span class=\\\"ms-CommandBarItem-commandText ms-font-m ms-font-weight-regular\\\">Reply</span></div></div></div><div class=\\\"ms-CommandBarItem\\\" ng-click=\\\"vm.deleteMessage()\\\"><div class=\\\"ms-CommandBarItem-linkWrapper\\\"><div class=\\\"ms-CommandBarItem-link\\\"><span class=\\\"ms-CommandBarItem-icon ms-Icon ms-Icon--trash\\\"></span> <span class=\\\"ms-CommandBarItem-commandText ms-font-m ms-font-weight-regular\\\">Delete</span></div></div></div><div class=\\\"ms-CommandBarItem ms-CommandBarItem--iconOnly ms-CommandBarItem-overflow\\\"><div class=\\\"ms-CommandBarItem-linkWrapper\\\"><div class=\\\"ms-CommandBarItem-link\\\"><span class=\\\"ms-CommandBarItem-icon ms-Icon ms-Icon--ellipsis\\\"></span> <span class=\\\"ms-CommandBarItem-commandText ms-font-m ms-font-weight-regular\\\"></span> <i class=\\\"ms-CommandBarItem-chevronDown ms-Icon ms-Icon--chevronDown\\\"></i></div></div><ul class=\\\"ms-CommandBar-overflowMenu ms-ContextualMenu\\\"></ul></div></div></div><p class=\\\"ms-font-xxl page-title\\\">{{ vm.Message.Subject }}</p><p ng-cloak=\\\"\\\">From: <span class=\\\"ms-fontWeight-semibold\\\">{{ vm.Message.Sender.EmailAddress.Name }} ({{ vm.Message.Sender.EmailAddress.Address }})</span></p><div data-ng-bind-html=\\\"vm.Message.Body.Content\\\"></div></article>\");}]);"],"sourceRoot":"/source/"}